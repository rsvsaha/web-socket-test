{"version":3,"sources":["styles/element.module.css","styles/formTest.module.css","services/socket.js","components/listerner.js","redux/actions.js","components/listenerContainer.js","components/emitter.js","components/emitterContainer.js","components/formTest.js","App.js","serviceWorker.js","redux/reducers/listenerReducers.js","redux/reducers/emitterReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["module","exports","SocketClientClass","url","socketclientClass","this","socket","io","connect","Object","freeze","ListenerComponent","props","startListening","socketClient","getSocket","on","state","listener_event","data","console","log","setState","message","JSON","stringify","removeListener","myKey","key","className","styles","holderArea","listenerConfigurationArea","style","flex","width","type","value","onChange","event","target","onClick","listenerMesssageArea","React","Component","dispatch","index","payload","ListnerContainerComponent","container","listenerArray","map","val","listenerReducers","EmitterComponent","emitEvent","emitter_event","emit","removeEmitter","emitterFieldHolder","labelHolder","inputHolder","height","EmitterContainerComponent","emitterArray","emitterReducers","FormTest","connectToSocket","isConnected","disconnectFromSocket","disconnect","createListeners","createEmitters","connectionURL","upDateFieldValue","bind","id","formTest","urlarea","containerarea","listenerArea","emitterArea","App","Boolean","window","location","hostname","match","initialState","numberOfListeners","numberOfEmitters","rootReducer","combineReducers","action","removedArray","filter","element","store","createStore","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,WAAa,4BAA4B,mBAAqB,oCAAoC,YAAc,6BAA6B,YAAc,6BAA6B,0BAA4B,2CAA2C,qBAAuB,wC,gGCAxSD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,QAAU,0BAA0B,cAAgB,gCAAgC,aAAe,+BAA+B,YAAc,8BAA8B,UAAY,8B,6KCArOC,EAAb,WAKI,WAAaC,GACT,GADe,oBACZD,EAAkBE,6BAA6BF,EAC9C,OAAOA,EAAkBE,kBAE7BC,KAAKC,OAASC,IAAGC,QAAQL,GACzBM,OAAOC,OAAOL,MACdH,EAAkBE,kBAAoBC,KAX9C,wDAcQ,OAAOA,KAAKC,WAdpB,K,gBCIMK,E,YAEF,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KASVC,eAAiB,WACb,EAAKC,aAAe,IAAIZ,EACxB,EAAKY,aAAaC,YAAYC,GAAG,EAAKC,MAAMC,gBAAe,SAACC,GACxDC,QAAQC,IAAI,YACZ,EAAKC,SAAS,CAACC,QAAQC,KAAKC,UAAUN,SAd5B,EAkBlBO,eAAiB,WACb,EAAKd,MAAMc,eAAe,EAAKd,MAAMe,MAAMC,MAjB3CR,QAAQC,IAAIT,GACZ,EAAKK,MAAQ,CACTM,QAAQ,GACRL,eAAe,IALL,E,sEAsBR,IAAD,OAEL,OACI,yBAAKW,UAAWC,IAAOC,YACnB,yBAAKF,UAAWC,IAAOE,2BACvB,yBAAKC,MAAO,CAACC,KAAK,IAAlB,kBACA,yBAAKD,MAAO,CAACC,KAAK,IAAI,2BAAOD,MAAO,CAACE,MAAM,QAASC,KAAK,OAAOC,MAAOhC,KAAKY,MAAMC,eAAgBoB,SAAU,SAACC,GAAS,EAAKjB,SAAS,CAACJ,eAAeqB,EAAMC,OAAOH,YACjK,yBAAKJ,MAAO,CAACC,KAAK,IAAI,2BAAOE,KAAK,SAASC,MAAM,SAASI,QAAS,WAAK,EAAK5B,qBAC7E,yBAAKoB,MAAO,CAACC,KAAK,IAAI,2BAAOE,KAAK,SAASC,MAAM,SAASI,QAASpC,KAAKqB,mBAExE,yBAAKG,UAAWC,IAAOY,sBAAvB,WAAuDrC,KAAKY,MAAMM,c,GAlClDoB,IAAMC,WAuDvBpC,cAAQ,MAPI,SAACqC,GACzB,MAAO,CACHnB,eAAiB,SAACoB,GAAYD,ECzCP,SAACC,GAC3B,MAAO,CACHV,KAAM,mBACNW,QAAQ,CACJnB,IAAIkB,IDqC8BpB,CAAeoB,QAK9CtC,CAAiCG,G,gBEvD1CqC,E,YAEF,WAAYpC,GAAO,qEACTA,I,sEAIN,OACI,yBAAKiB,UAAWC,IAAOmB,WAGX5C,KAAKO,MAAMsC,cAAcC,KAAI,SAACC,GAE1B,OAAQ,kBAAC,EAAD,CAAmBxB,IAAKwB,EAAIxB,IAAKD,MAAOyB,Y,GAbpCT,IAAMC,WA8B/BpC,eARS,SAACS,GAAW,IACzBoC,EAAoBpC,EAApBoC,iBAEP,OADAjC,QAAQC,IAAIJ,GACL,CACHiC,cAAeG,EAAiBH,iBAIzB1C,CAAyBwC,GC9BlCM,E,YAEF,WAAY1C,GAAO,IAAD,8BACd,4CAAMA,KASV2C,UAAY,WACR,EAAKzC,aAAe,IAAIZ,EACxBkB,QAAQC,IAAI,EAAKJ,MAAMuC,eACvB,EAAK1C,aAAaC,YAAY0C,KAAK,EAAKxC,MAAMuC,cAAc,CAACrC,KAAK,EAAKF,MAAMM,WAb/D,EAgBlBmC,cAAgB,WACZ,EAAK9C,MAAM8C,cAAc,EAAK9C,MAAMe,MAAMC,MAf1CR,QAAQC,IAAIT,GACZ,EAAKK,MAAQ,CACTM,QAAQ,GACRiC,cAAc,IALJ,E,sEAoBR,IAAD,OAEL,OACI,yBAAK3B,UAAWC,IAAOC,YACnB,yBAAKF,UAAWC,IAAO6B,oBACnB,yBAAK9B,UAAWC,IAAO8B,aAAvB,iBACA,yBAAK/B,UAAWC,IAAO+B,aAAa,2BAAOzB,KAAK,OAAOH,MAAO,CAACE,MAAM,QAASE,MAAOhC,KAAKY,MAAMuC,cAAelB,SAAU,SAACC,GAAS,EAAKjB,SAAS,CAACkC,cAAcjB,EAAMC,OAAOH,aAEjL,yBAAKR,UAAWC,IAAO6B,oBACnB,yBAAK9B,UAAWC,IAAO8B,aAAvB,YACA,yBAAK/B,UAAWC,IAAO+B,aAAa,8BAAU5B,MAAO,CAACE,MAAM,OAAO2B,OAAO,SAAUzB,MAAOhC,KAAKY,MAAMM,QAASe,SAAU,SAACC,GAAS,EAAKjB,SAAS,CAACC,QAAQgB,EAAMC,OAAOH,aAE3K,yBAAKR,UAAWC,IAAO6B,oBACnB,yBAAK9B,UAAWC,IAAO8B,aAAa,2BAAOxB,KAAK,SAASC,MAAM,OAAOI,QAAS,WAAK,EAAKc,gBACzF,yBAAK1B,UAAWC,IAAO+B,aAAa,2BAAOzB,KAAK,SAASC,MAAM,SAASI,QAASpC,KAAKqD,uB,GApC3Ef,IAAMC,WAyDtBpC,cAAQ,MAPI,SAACqC,GACzB,MAAO,CACHa,cAAgB,SAACZ,GAAYD,EFlCP,SAACC,GAC1B,MAAO,CACHV,KAAM,kBACNW,QAAQ,CACJnB,IAAMkB,IE8B2BY,CAAcZ,QAK5CtC,CAAiC8C,GCzD1CS,E,YAEF,WAAYnD,GAAO,qEACTA,I,sEAIN,OACI,yBAAKiB,UAAWC,IAAOmB,WAEX5C,KAAKO,MAAMoD,aAAab,KAAI,SAACC,GAEzB,OAAQ,kBAAC,EAAD,CAAkBxB,IAAKwB,EAAIxB,IAAKD,MAAOyB,Y,GAZnCT,IAAMC,WA6B/BpC,eARS,SAACS,GAAW,IACzBgD,EAAmBhD,EAAnBgD,gBAEP,OADA7C,QAAQC,IAAIJ,GACL,CACH+C,aAAcC,EAAgBD,gBAIvBxD,CAAyBuD,GC1BlCG,E,YAEF,WAAYtD,GAAQ,IAAD,8BACf,4CAAMA,KAYVuD,gBAAkB,SAAChE,GACf,EAAKW,aAAe,IAAIZ,EAAkBC,GAC1C,EAAKmB,SAAS,CAAC8C,YAAY,eAfZ,EAmBnBC,qBAAuB,WACnBjD,QAAQC,IAAI,EAAKP,aAAaC,YAAYuD,cAC1C,EAAKhD,SAAS,CAAC8C,YAAY,kBArBZ,EAyBnBG,gBAAkB,WACd,EAAK3D,MAAM2D,mBA1BI,EA8BnBC,eAAiB,WACb,EAAK5D,MAAM4D,kBA7BX,EAAKvD,MAAO,CACRwD,cAAc,GACdL,YAAY,gBAEhB,EAAKM,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBANT,E,iFASS,IAAVnC,EAAS,EAATA,OACdnC,KAAKiB,SAAL,eAAgBkB,EAAOoC,GAAIpC,EAAOH,U,+BAyB5B,IAAD,OAEL,OACI,yBAAKR,UAAWC,IAAO+C,UACnB,yBAAKhD,UAAWC,IAAOgD,SACvB,iDAAuBzE,KAAKY,MAAMwD,cAAlC,KAAmDpE,KAAKY,MAAMmD,YAA9D,KACA,6BACA,2BAAOQ,GAAG,gBAAgBxC,KAAK,OAAOC,MAAOhC,KAAKY,MAAMwD,cAAenC,SAAUjC,KAAKqE,mBACtF,6BACA,2BAAOtC,KAAK,SAASC,MAAM,UAAUI,QAAS,WAAK,EAAK0B,gBAAgB,EAAKlD,MAAMwD,kBACnF,2BAAOrC,KAAK,SAASC,MAAM,aAAaI,QAAS,WAAK,EAAK4B,0BAE3D,6BACA,2BAAOjC,KAAK,SAASC,MAAM,cAAcI,QAAS,WAAK,EAAK8B,qBAC5D,2BAAOnC,KAAK,SAASC,MAAM,cAAcI,QAAS,WAAK,EAAK+B,qBAE5D,yBAAK3C,UAAWC,IAAOiD,eACnB,yBAAKlD,UAAWC,IAAOkD,cAAc,kBAAC,EAAD,OACrC,yBAAKnD,UAAWC,IAAOmD,aAAa,kBAAC,EAAD,a,GAvDjCtC,IAAMC,WA2EdpC,cAAQ,MATI,SAACqC,GACxB,MAAO,CACC0B,gBAAiB,WAAO1B,EJ3EzB,CACHT,KAAM,mBI2EFoC,eAAgB,WAAO3B,EJrExB,CACHT,KAAM,qBI0EC5B,CAAiC0D,GCtDjCgB,MAxBf,WACE,OACE,yBAAKrD,UAAU,OAeb,kBAAC,EAAD,QCVcsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCjBAC,EAAe,CACjBtC,cAAc,IAEduC,EAAoB,ECJlBD,EAAc,CAChBxB,aAAa,IAEb0B,EAAmB,ECAVC,EAAcC,YAAgB,CAACvC,iBFEZ,WAA8B,IAA7BpC,EAA4B,uDAAtBuE,EAAaK,EAAS,uCACzD,GAAmB,kBAAhBA,EAAOzD,KAEN,OADAqD,GAAmB,EACZ,eACAxE,EADP,CAEIiC,cAAa,sBAAOjC,EAAMiC,eAAb,CAA2B,CAACtB,IAAI6D,OAE/C,GAAmB,qBAAhBI,EAAOzD,KAA6B,CAAC,IAAD,iBAEfnB,GAArBiC,EAFoC,EAEpCA,cACL9B,QAAQC,IAAIwE,EAAO9C,SAEnB,IAAI+C,EAAe5C,EAAc6C,QAAO,SAACC,GACrC,OAAOA,EAAQpE,KAAOiE,EAAO9C,QAAQnB,OAGzC,OADAR,QAAQC,IAAIyE,GACL,eACA7E,EADP,CAEIiC,cAAa,YAAO4C,KAKxB,OAAO7E,GEzB8CgD,gBDC9B,WAA+B,IAA9BhD,EAA6B,uDAAvBuE,EAAaK,EAAU,uCAEzD,GAAmB,iBAAhBA,EAAOzD,KAEN,OADAsD,GAAmB,EACZ,eAAIzE,EAAX,CACI+C,aAAY,sBAAO/C,EAAM+C,cAAb,CAA0B,CAACpC,IAAI8D,OAE7C,GAAoB,oBAAhBG,EAAOzD,KAA4B,CAAC,IAAD,iBAChBnB,GAApB+C,EADoC,EACpCA,aACL5C,QAAQC,IAAIwE,EAAO9C,SAEnB,IAAI+C,EAAe9B,EAAa+B,QAAO,SAACC,GACpC,OAAOA,EAAQpE,KAAOiE,EAAO9C,QAAQnB,OAGzC,OAAO,eAAIX,EAAX,CACI+C,aAAa,YAAI8B,KAGrB,OAAO7E,KEpBFgF,EAAQC,YAAYP,G,QCMjCQ,iBACA,kBAAC,IAAD,CAAUF,MAAOA,GACjB,kBAAC,EAAD,OAEEG,SAASC,eAAe,SLsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9aace1cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"holderArea\":\"element_holderArea__qn7iD\",\"emitterFieldHolder\":\"element_emitterFieldHolder__29RW0\",\"labelHolder\":\"element_labelHolder__3kXBH\",\"inputHolder\":\"element_inputHolder__-gWk4\",\"listenerConfigurationArea\":\"element_listenerConfigurationArea__-Z8vA\",\"listenerMesssageArea\":\"element_listenerMesssageArea__3bRr-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formTest\":\"formTest_formTest__1JlFt\",\"urlarea\":\"formTest_urlarea__2Z5fC\",\"containerarea\":\"formTest_containerarea__2LjAN\",\"listenerArea\":\"formTest_listenerArea__3FrPE\",\"emitterArea\":\"formTest_emitterArea__Anoiz\",\"container\":\"formTest_container__15-hq\"};","import io from 'socket.io-client';\r\nexport class SocketClientClass {\r\n\r\n    socket;\r\n    socketclientClass;\r\n    \r\n    constructor (url) {\r\n        if(SocketClientClass.socketclientClass instanceof SocketClientClass) {\r\n            return SocketClientClass.socketclientClass;\r\n        }\r\n        this.socket = io.connect(url);\r\n        Object.freeze(this);\r\n        SocketClientClass.socketclientClass = this;\r\n    }\r\n    getSocket() {\r\n        return this.socket;\r\n        \r\n    }\r\n\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {removeListener} from '../redux/actions';\r\nimport {SocketClientClass} from '../services/socket';\r\nimport styles from '../styles/element.module.css';\r\nclass ListenerComponent extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {\r\n            message:'',\r\n            listener_event:''\r\n        }\r\n        \r\n    }\r\n    \r\n    startListening = () => {\r\n        this.socketClient = new SocketClientClass();\r\n        this.socketClient.getSocket().on(this.state.listener_event,(data)=>{\r\n            console.log(\"Received\");\r\n            this.setState({message:JSON.stringify(data)});\r\n        });\r\n    }\r\n    \r\n    removeListener = () =>{\r\n        this.props.removeListener(this.props.myKey.key);\r\n    }    \r\n\r\n    render() {\r\n        \r\n        return(\r\n            <div className={styles.holderArea}>\r\n                <div className={styles.listenerConfigurationArea}>\r\n                <div style={{flex:1}}>ListenerEvent:</div>\r\n                <div style={{flex:3}}><input style={{width:\"100%\"}} type=\"text\" value={this.state.listener_event} onChange={(event)=>{this.setState({listener_event:event.target.value})}}></input></div>\r\n                <div style={{flex:1}}><input type=\"button\" value=\"LISTEN\" onClick={()=>{this.startListening()}}></input></div>\r\n                <div style={{flex:1}}><input type=\"button\" value=\"REMOVE\" onClick={this.removeListener}></input></div>\r\n                </div>\r\n                <div className={styles.listenerMesssageArea} >Message:{this.state.message}</div>\r\n                \r\n            </div>\r\n\r\n\r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return { \r\n       removeListener : (index) => { dispatch(removeListener(index))}\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null,mapDispatchToProps)(ListenerComponent)\r\n","export const addListener = () =>{\r\n    return {\r\n        type: 'ADD_LISTENERS'\r\n        \r\n    }\r\n};\r\n\r\nexport const addEmitter = () =>{\r\n    return {\r\n        type: 'ADD_EMITTERS'\r\n        \r\n    }\r\n};\r\n\r\nexport const removeListener = (index) =>{\r\n    return {\r\n        type: 'REMOVE_LISTENERS',\r\n        payload:{\r\n            key:index\r\n        }\r\n    }\r\n};\r\n \r\nexport const removeEmitter = (index) =>{\r\n    return {\r\n        type: 'REMOVE_EMITTERS',\r\n        payload:{\r\n            key : index\r\n        }\r\n    }\r\n};\r\n","import React from 'react';\r\nimport ListenerComponent from './listerner';\r\nimport {connect} from 'react-redux';\r\nimport styles from '../styles/formTest.module.css';\r\n\r\nclass ListnerContainerComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.container}>\r\n            \r\n                    {   \r\n                        this.props.listenerArray.map((val) =>{\r\n                            // console.log(key);\r\n                            return (<ListenerComponent key={val.key} myKey={val}></ListenerComponent>);\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n        );\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    const {listenerReducers} = state;\r\n    console.log(state);\r\n    return {\r\n        listenerArray: listenerReducers.listenerArray\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ListnerContainerComponent);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {removeEmitter} from '../redux/actions';\r\nimport {SocketClientClass} from '../services/socket';\r\nimport styles from '../styles/element.module.css';\r\nclass EmitterComponent extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {\r\n            message:'',\r\n            emitter_event:''\r\n        }\r\n        \r\n    }\r\n    \r\n    emitEvent = () => {\r\n        this.socketClient = new SocketClientClass();\r\n        console.log(this.state.emitter_event);\r\n        this.socketClient.getSocket().emit(this.state.emitter_event,{data:this.state.message});\r\n    }\r\n    \r\n    removeEmitter = () =>{\r\n        this.props.removeEmitter(this.props.myKey.key);\r\n    }    \r\n\r\n    render() {\r\n        \r\n        return(\r\n            <div className={styles.holderArea}>\r\n                <div className={styles.emitterFieldHolder}>\r\n                    <div className={styles.labelHolder}>EmitterEvent:</div>\r\n                    <div className={styles.inputHolder}><input type=\"text\" style={{width:\"100%\"}} value={this.state.emitter_event} onChange={(event)=>{this.setState({emitter_event:event.target.value})}}></input></div>\r\n                </div>\r\n                <div className={styles.emitterFieldHolder}>\r\n                    <div className={styles.labelHolder}>Message:</div>\r\n                    <div className={styles.inputHolder}><textarea style={{width:\"100%\",height:\"100px\"}} value={this.state.message} onChange={(event)=>{this.setState({message:event.target.value})}}></textarea></div>\r\n                </div>\r\n                <div className={styles.emitterFieldHolder}>\r\n                    <div className={styles.labelHolder}><input type=\"button\" value=\"EMIT\" onClick={()=>{this.emitEvent()}}></input></div>\r\n                    <div className={styles.inputHolder}><input type=\"button\" value=\"REMOVE\" onClick={this.removeEmitter}></input></div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return { \r\n       removeEmitter : (index) => { dispatch(removeEmitter(index))}\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null,mapDispatchToProps)(EmitterComponent)\r\n","import React from 'react';\r\nimport EmitterComponent from './emitter';\r\nimport {connect} from 'react-redux';\r\nimport styles from '../styles/formTest.module.css';\r\n\r\nclass EmitterContainerComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.container}>\r\n                    {   \r\n                        this.props.emitterArray.map((val) =>{\r\n                            // console.log(key);\r\n                            return (<EmitterComponent key={val.key} myKey={val}></EmitterComponent>);\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n        );\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    const {emitterReducers} = state;\r\n    console.log(state);\r\n    return {\r\n        emitterArray: emitterReducers.emitterArray\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(EmitterContainerComponent);","import React from 'react';\r\nimport ListenerComponent from './listerner';\r\nimport {connect} from 'react-redux';\r\nimport {addEmitter,addListener} from '../redux/actions';\r\nimport ListenerContainerComponent from './listenerContainer';\r\nimport EmitterContainerComponent from './emitterContainer';\r\nimport styles from '../styles/formTest.module.css';\r\nimport {SocketClientClass} from '../services/socket';\r\nclass FormTest extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            connectionURL:'',\r\n            isConnected:'DISCONNECTED'\r\n        }\r\n        this.upDateFieldValue = this.upDateFieldValue.bind(this);\r\n    }\r\n    \r\n    upDateFieldValue({target}) {\r\n        this.setState({[target.id]:target.value});\r\n    }\r\n\r\n    connectToSocket = (url)=> {\r\n        this.socketClient = new SocketClientClass(url);\r\n        this.setState({isConnected:'CONNECTED'});\r\n         \r\n    }\r\n\r\n    disconnectFromSocket = () =>{\r\n        console.log(this.socketClient.getSocket().disconnect());\r\n        this.setState({isConnected:'DISCONNECTED'});\r\n\r\n    }\r\n\r\n    createListeners = () =>{\r\n        this.props.createListeners();\r\n        // this.setState({listenerArray:this.props.listenerArray});\r\n    }\r\n\r\n    createEmitters = () => {\r\n        this.props.createEmitters();\r\n    }\r\n\r\n\r\n    render() {\r\n        // console.log(this.props);\r\n        return (\r\n            <div className={styles.formTest}>\r\n                <div className={styles.urlarea}>\r\n                <label>Connection URL:{this.state.connectionURL} ({this.state.isConnected})</label>\r\n                <br></br>\r\n                <input id=\"connectionURL\" type=\"text\" value={this.state.connectionURL} onChange={this.upDateFieldValue}></input>\r\n                <br></br>\r\n                <input type=\"button\" value=\"CONNECT\" onClick={()=>{this.connectToSocket(this.state.connectionURL)}}></input>\r\n                <input type=\"button\" value=\"DISCONNECT\" onClick={()=>{this.disconnectFromSocket()}}></input>\r\n                \r\n                <br></br>\r\n                <input type=\"button\" value=\"ADD LISTNER\" onClick={()=>{this.createListeners()}}></input>\r\n                <input type=\"button\" value=\"ADD EMITTER\" onClick={()=>{this.createEmitters()}}></input>\r\n                </div>\r\n                <div className={styles.containerarea}>                \r\n                    <div className={styles.listenerArea}><ListenerContainerComponent></ListenerContainerComponent></div>\r\n                    <div className={styles.emitterArea}><EmitterContainerComponent></EmitterContainerComponent></div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n            createListeners: () => {dispatch(addListener())},\r\n            createEmitters: () => {dispatch(addEmitter())}\r\n            }\r\n};\r\n\r\n\r\n\r\nexport default connect(null,mapDispatchToProps)(FormTest);","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport FormTest from './components/formTest';\r\n// import ListenerComponent from './components/listerner';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header> */}\r\n      <FormTest></FormTest>\r\n      \r\n            \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nconst initialState = {\r\n    listenerArray:[],\r\n}\r\nvar numberOfListeners = 0;\r\nexport const listenerReducers = (state=initialState,action)=>{\r\n    if(action.type === 'ADD_LISTENERS') {\r\n        numberOfListeners+=1;\r\n        return {\r\n            ...state,\r\n            listenerArray : [...state.listenerArray,{key:numberOfListeners}]\r\n        }\r\n    }else if(action.type === 'REMOVE_LISTENERS') {\r\n        \r\n        var {listenerArray} = {...state};\r\n        console.log(action.payload);\r\n        \r\n        var removedArray = listenerArray.filter((element) =>{\r\n            return element.key != action.payload.key;\r\n        });\r\n        console.log(removedArray);\r\n        return {\r\n            ...state,\r\n            listenerArray : [...removedArray]\r\n        }\r\n    } \r\n    else {\r\n        // console.log(state);\r\n        return state;\r\n    }\r\n\r\n}","const initialState= {\r\n    emitterArray:[]\r\n}\r\nvar numberOfEmitters = 0\r\nexport const emitterReducers = (state=initialState,action) =>{\r\n\r\n    if(action.type === 'ADD_EMITTERS') {\r\n        numberOfEmitters +=1 ;\r\n        return {...state,\r\n            emitterArray : [...state.emitterArray,{key:numberOfEmitters}]\r\n        };\r\n    }else if (action.type === 'REMOVE_EMITTERS') {\r\n        var {emitterArray} = {...state};\r\n        console.log(action.payload);\r\n        \r\n        var removedArray = emitterArray.filter((element) =>{\r\n            return element.key != action.payload.key;\r\n        });\r\n        \r\n        return {...state,\r\n            emitterArray:[...removedArray]\r\n        };\r\n    } else {\r\n        return state;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import {combineReducers} from 'redux';\r\nimport {listenerReducers} from './listenerReducers';\r\nimport {emitterReducers} from './emitterReducer';\r\nexport const rootReducer = combineReducers({listenerReducers,emitterReducers})","import {createStore} from 'redux';\r\nimport {rootReducer} from './reducers/index';\r\n\r\nexport const store = createStore(rootReducer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/store';\r\nimport { render } from 'react-snapshot';\r\n// ReactDOM.render(\r\nrender(\r\n<Provider store={store}>\r\n<App />\r\n</Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}